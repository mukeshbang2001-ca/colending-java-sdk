/*
 * KrazybeeLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package in.credavenue.colenduat01api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import in.credavenue.colenduat01api.ApiHelper;
import in.credavenue.colenduat01api.KrazybeeClient;
import in.credavenue.colenduat01api.exceptions.ApiException;
import in.credavenue.colenduat01api.models.AgreementSigned200;
import in.credavenue.colenduat01api.models.ClientsApiInterestAccrualRequest;
import in.credavenue.colenduat01api.models.ClientsApiLoansAdvancePaymentsAdvancePaymentIdRequest;
import in.credavenue.colenduat01api.models.ClientsApiLoansAdvancePaymentsRequest;
import in.credavenue.colenduat01api.models.ClientsApiLoansDisburseRequest;
import in.credavenue.colenduat01api.models.ClientsApiLoansUpdatePostDisbursementRequest;
import in.credavenue.colenduat01api.models.GetLoan200;
import in.credavenue.colenduat01api.models.GetPayment200;
import in.credavenue.colenduat01api.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class APIControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static KrazybeeClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static APIController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAPIController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * # Disburse Loan API This endpoint can be used to disburse the loan. ## Request Params <table>
     * <thead> <tr> <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th>
     * <th>Description</th> <th>Example</th> </tr> </thead> <tbody> <tr> <td>disbursement_date</td>
     * <td>string</td> <td>date</td> <td>false</td> <td>Disbursement date to the end customer</td>
     * <td>2016-06-10</td> </tr> <tr> <td>first_repayment_date</td> <td>string</td> <td>date</td>
     * <td>true</td> <td>First repayment date as per repayment schedule</td> <td>2014-03-13</td>
     * </tr> <tr> <td>instrument_number</td> <td>string</td> <td></td> <td>true</td> <td>UTR /
     * Cheque Number</td> <td>instrument_number_44</td> </tr> <tr> <td>instrument_type</td>
     * <td>string</td> <td></td> <td>false</td> <td>RTGS / NEFT / UPI / Cheque</td>
     * <td>instrument_type_53</td> </tr> <tr> <td>loan_amount</td> <td>number</td> <td>float</td>
     * <td>true</td> <td></td> <td>9.881292511668622</td> </tr> <tr> <td>sanction_amount</td>
     * <td>number</td> <td>float</td> <td>false</td> <td></td> <td>0.8843958042013156</td> </tr>
     * <tr> <td>differential_interest_start_date</td> <td>string</td> <td>date</td> <td>false</td>
     * <td>PreEMI Interest Due Date</td> <td>2019-11-09</td> </tr> <tr>
     * <td>differential_interest</td> <td>number</td> <td>float</td> <td>false</td> <td>Broken
     * Period Interest Amount (in Rupees)</td> <td>3.23114387582661</td> </tr> <tr>
     * <td>processing_fee</td> <td>number</td> <td>float</td> <td>false</td> <td>Processing Fee
     * (Inclusive of GST)</td> <td>1.4299243327061884</td> </tr> <tr> <td>stamp_duty</td>
     * <td>number</td> <td>float</td> <td>false</td> <td></td> <td>2.4815020798078544</td> </tr>
     * <tr> <td>insurance_premium_amount</td> <td>number</td> <td>float</td> <td>false</td>
     * <td>Insurance Premium (Inclusive of GST)</td> <td>9.427877080418464</td> </tr> <tr>
     * <td>documentation_fee</td> <td>number</td> <td>float</td> <td>false</td> <td>Documentation
     * Charges (Inclusive of GST)</td> <td>8.194566227899582</td> </tr> <tr> <td>other_charges</td>
     * <td>number</td> <td>float</td> <td>false</td> <td>Any Other Charges (Inclusive of GST)</td>
     * <td>6.960064772749501</td> </tr> <tr> <td>net_disbursed_amount</td> <td>number</td>
     * <td>float</td> <td>false</td> <td></td> <td>3.564242525261838</td> </tr> <tr>
     * <td>penny_test_status</td> <td>boolean</td> <td>boolean</td> <td>true</td> <td></td>
     * <td>false</td> </tr> <tr> <td>penny_test_report_link</td> <td>array</td> <td></td>
     * <td>false</td> <td></td> <td>[&quot;penny_test_report_link_18&quot;,
     * &quot;penny_test_report_link_54&quot;]</td> </tr> </tbody> </table> ## Response Codes <table
     * border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <thead> <tr> <th
     * scope="col" class="org-right">Code</th> <th scope="col" class="org-left">Message</th> <th
     * scope="col" class="org-left">Reason</th> </tr> </thead> <tbody> <tr> <td
     * class="org-right">204</td> <td class="org-left">No content</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">400</td> <td class="org-left">Bad Request</td> <td
     * class="org-left"><ul><li>Failed due to invalid request format</li> <li>Missing required
     * parameters</li> <li>Loan is in invalid state</li> </td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDisburse() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";
        ClientsApiLoansDisburseRequest body = ApiHelper.deserialize(
                "{\"disbursement_date\":\"2016-06-10\",\"first_repayment_date\":\"2014-03-13\",\"in"
                + "strument_number\":\"instrument_number_44\",\"instrument_type\":\"instrument_type"
                + "_53\",\"loan_amount\":9.8812925116686223,\"sanction_amount\":0.88439580420131558"
                + ",\"differential_interest_start_date\":\"2019-11-09\",\"differential_interest\":3"
                + ".23114387582661,\"processing_fee\":1.4299243327061884,\"stamp_duty\":2.481502079"
                + "8078544,\"insurance_premium_amount\":9.4278770804184635,\"documentation_fee\":8."
                + "1945662278995819,\"other_charges\":6.9600647727495009,\"net_disbursed_amount\":3"
                + ".5642425252618382,\"penny_test_status\":false,\"penny_test_report_link\":[\"penn"
                + "y_test_report_link_18\",\"penny_test_report_link_54\"]}",
                ClientsApiLoansDisburseRequest.class);

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.disburse(clientName, loanId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # GET Payment Details This API endpoint can be used to get the Payment details. ## Response
     * Codes <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
     * <colgroup> <col class="org-right" /> <col class="org-left" /> <col class="org-left" />
     * </colgroup> <thead> <tr> <th scope="col" class="org-right">Code</th> <th scope="col"
     * class="org-left">Message</th> <th scope="col" class="org-left">Reason</th> </tr> </thead>
     * <tbody> <tr> <td class="org-right">200</td> <td class="org-left">OK</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGETPaymentDetails() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";

        // Set callback and perform API call
        List<GetPayment200> result = null;
        try {
            result = controller.gETPaymentDetails(clientName, loanId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"id\":92135,\"reference_no\":\"null\",\"paid_date\":\"2020-09-22T00:00:00Z\","
                + "\"principal\":50249,\"interest\":502,\"other_charges\":0,\"amount\":50751,\"comm"
                + "ent\":\"Repayment\",\"created_at\":\"2020-09-23T04:26:24.133Z\",\"updated_at\":"
                + "\"2020-09-23T04:26:24.133Z\",\"overdue_charges\":0,\"penalty_charges\":0,\"fee_c"
                + "harges\":0,\"bounce_charges\":0,\"investor_transfer_date\":\"2020-09-22\",\"emi_"
                + "closed\":true,\"foreclosure\":false,\"payment_type\":\"normal\",\"installment_no"
                + "\":2},{\"id\":92133,\"reference_no\":\"null\",\"paid_date\":\"2020-09-22T00:00:0"
                + "0Z\",\"principal\":49751,\"interest\":1000,\"other_charges\":0,\"amount\":50751,"
                + "\"comment\":\"Repayment\",\"created_at\":\"2020-09-22T07:57:42.009Z\",\"updated_"
                + "at\":\"2020-09-22T07:57:42.009Z\",\"overdue_charges\":0,\"penalty_charges\":0,"
                + "\"fee_charges\":0,\"bounce_charges\":0,\"investor_transfer_date\":\"2020-09-22"
                + "\",\"emi_closed\":true,\"foreclosure\":false,\"payment_type\":\"normal\",\"insta"
                + "llment_no\":1}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # Advance Collection API This endpoint can be used to update the loan status to agreement
     * signed. **Expected Loan Status: "approved"** ## Request Params <table> <thead> <tr>
     * <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th> <th>Description</th>
     * <th>Example</th> </tr> </thead> <tbody> <tr> <td>instrument_number</td> <td>string</td>
     * <td></td> <td>true</td> <td>UTR / Cheque Number</td> <td>instrument_number_43</td> </tr> <tr>
     * <td>instrument_type</td> <td>string</td> <td></td> <td>true</td> <td>RTGS / NEFT / UPI /
     * Cheque</td> <td>instrument_type_13</td> </tr> <tr> <td>transaction_type</td> <td>string</td>
     * <td></td> <td>true</td> <td>Credit / Refund</td> <td>transaction_type_55</td> </tr> <tr>
     * <td>amount</td> <td>number</td> <td>float</td> <td>true</td> <td></td>
     * <td>3.1060698857470537</td> </tr> <tr> <td>transaction_date</td> <td>string</td>
     * <td>date</td> <td>true</td> <td>Date when customer paid the amount (YYYY-MM-DD)</td>
     * <td>2021-04-22</td> </tr> <tr> <td>investor_transfer_date</td> <td>string</td> <td>date</td>
     * <td>false</td> <td>Date when originator transferred the amount to investor (YYYY-MM-DD)</td>
     * <td>2015-12-11</td> </tr> <tr> <td>advance_outstanding</td> <td>number</td> <td>float</td>
     * <td>true</td> <td>Before this collection record to mention advance outstanding for that
     * loan</td> <td>1.8167180515891557</td> </tr> <tr> <td>comment</td> <td>string</td> <td></td>
     * <td>false</td> <td></td> <td>comment_15</td> </tr> </tbody> </table> ## Response Codes <table
     * border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <thead> <tr> <th
     * scope="col" class="org-right">Code</th> <th scope="col" class="org-left">Message</th> <th
     * scope="col" class="org-left">Reason</th> </tr> </thead> <tbody> <tr> <td
     * class="org-right">204</td> <td class="org-left">No content</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">400</td> <td class="org-left">Bad Request</td> <td
     * class="org-left"><ul><li>Failed due to invalid request format</li> <li>Missing required
     * parameters</li> <li>Loan is in invalid state</li> </td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateAdvanceCollection() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";
        ClientsApiLoansAdvancePaymentsRequest body = ApiHelper.deserialize(
                "{\"instrument_number\":\"instrument_number_43\",\"instrument_type\":\"instrument_t"
                + "ype_13\",\"transaction_type\":\"transaction_type_55\",\"amount\":3.1060698857470"
                + "537,\"transaction_date\":\"2021-04-22\",\"investor_transfer_date\":\"2015-12-11"
                + "\",\"advance_outstanding\":1.8167180515891557,\"comment\":\"comment_15\"}",
                ClientsApiLoansAdvancePaymentsRequest.class);

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.createAdvanceCollection(clientName, loanId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # Update Advance Collection API This endpoint can be used to update the loan status to
     * agreement signed. **Expected Loan Status: "approved"** ## Request Params <table> <thead> <tr>
     * <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th> <th>Description</th>
     * <th>Example</th> </tr> </thead> <tbody> <tr> <td>investor_transfer_date</td> <td>string</td>
     * <td>date</td> <td>false</td> <td>Date when originator transferred the amount to investor
     * (YYYY-MM-DD)</td> <td>2017-06-28</td> </tr> </tbody> </table> ## Response Codes <table
     * border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <thead> <tr> <th
     * scope="col" class="org-right">Code</th> <th scope="col" class="org-left">Message</th> <th
     * scope="col" class="org-left">Reason</th> </tr> </thead> <tbody> <tr> <td
     * class="org-right">204</td> <td class="org-left">No content</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">400</td> <td class="org-left">Bad Request</td> <td
     * class="org-left"><ul><li>Failed due to invalid request format</li> <li>Missing required
     * parameters</li> <li>Loan is in invalid state</li> </td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdateAdvanceCollection() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";
        String advancePaymentId = 
                "AB001";
        ClientsApiLoansAdvancePaymentsAdvancePaymentIdRequest body = ApiHelper.deserialize(
                "{\"investor_transfer_date\":\"2017-06-28\"}",
                ClientsApiLoansAdvancePaymentsAdvancePaymentIdRequest.class);

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.updateAdvanceCollection(clientName, loanId, advancePaymentId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # Update Interest Accruals API This endpoint can be used to update the loan status to
     * agreement signed. **Expected Loan Status: "approved"** ## Request Params <table> <thead> <tr>
     * <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th> <th>Description</th>
     * <th>Example</th> </tr> </thead> <tbody> <tr> <td>file_link</td> <td>string</td> <td></td>
     * <td>true</td> <td></td> <td>file_link_69</td> </tr> </tbody> </table> ## Response Codes
     * <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <thead> <tr>
     * <th scope="col" class="org-right">Code</th> <th scope="col" class="org-left">Message</th> <th
     * scope="col" class="org-left">Reason</th> </tr> </thead> <tbody> <tr> <td
     * class="org-right">204</td> <td class="org-left">No content</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">400</td> <td class="org-left">Bad Request</td> <td
     * class="org-left"><ul><li>Failed due to invalid request format</li> <li>Missing required
     * parameters</li> <li>Loan is in invalid state</li> </td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdateInterestAccruals() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        ClientsApiInterestAccrualRequest body = ApiHelper.deserialize(
                "{\"file_link\":\"file_link_69\"}",
                ClientsApiInterestAccrualRequest.class);

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.updateInterestAccruals(clientName, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # Interest Accrual API This endpoint can be used to update the loan status to agreement
     * signed. **Expected Loan Status: "approved"** ## Request Params <table> <thead> <tr>
     * <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th> <th>Description</th>
     * <th>Example</th> </tr> </thead> <tbody> </tbody> </table> ## Response Codes <table border="2"
     * cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <thead> <tr> <th scope="col"
     * class="org-right">Code</th> <th scope="col" class="org-left">Message</th> <th scope="col"
     * class="org-left">Reason</th> </tr> </thead> <tbody> <tr> <td class="org-right">204</td> <td
     * class="org-left">No content</td> <td class="org-left">Success</td> </tr> <tr> <td
     * class="org-right">401</td> <td class="org-left">Unauthorized</td> <td
     * class="org-left">Invalid API Key</td> </tr> <tr> <td class="org-right">400</td> <td
     * class="org-left">Bad Request</td> <td class="org-left"><ul><li>Failed due to invalid request
     * format</li> <li>Missing required parameters</li> <li>Loan is in invalid state</li> </td>
     * </tr> <tr> <td class="org-right">404</td> <td class="org-left">Not found</td> <td
     * class="org-left">Loan not found</td> </tr> <tr> <td class="org-right">500</td> <td
     * class="org-left">Internal Server Error</td> <td class="org-left">Error occurred in the
     * backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestInterestAccrual() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String fileId = 
                "1";

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.interestAccrual(clientName, fileId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # GET Loan Details This API endpoint can be used to get the loan details. The possible loan
     * status values are ## Loan Status <table border="2" cellspacing="0" cellpadding="6"
     * rules="groups" frame="hsides"> <colgroup> <col class="org-left" /> <col class="org-left" />
     * </colgroup> <thead> <tr> <th scope="col" class="org-left">State</th> <th scope="col"
     * class="org-left">Description</th> </tr> </thead> <tbody> <tr> <td class="org-left">new</td>
     * <td class="org-left">When the loan is created</td> </tr> <tr> <td
     * class="org-left">approved</td> <td class="org-left">When the loan is approved by the
     * investor</td> </tr> <tr> <td class="org-left">rejected</td> <td class="org-left">When the
     * loan is rejected by the investor</td> </tr> <tr> <td class="org-left">agreement_signed</td>
     * <td class="org-left">When end borrower agreement/EKYC is signed/collected</td> </tr> <tr> <td
     * class="org-left">disbursement_ready</td> <td class="org-left">When investor is ready to
     * disburse the funds</td> </tr> <tr> <td class="org-left">dropped</td> <td
     * class="org-left">When the loan gets rejected by the investor at agreement signed state</td>
     * </tr> <tr> <td class="org-left">disbursed</td> <td class="org-left">When the loan moves to
     * the disbursed state by the investor from agreement signed state</td> </tr> <tr> <td
     * class="org-left">matured</td> <td class="org-left">After closure of all installments, the
     * loan moves to the matured state</td> </tr> </tbody> </table> ## Response Codes <table
     * border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col
     * class="org-right" /> <col class="org-left" /> <col class="org-left" /> </colgroup> <thead>
     * <tr> <th scope="col" class="org-right">Code</th> <th scope="col"
     * class="org-left">Message</th> <th scope="col" class="org-left">Reason</th> </tr> </thead>
     * <tbody> <tr> <td class="org-right">200</td> <td class="org-left">OK</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetLoanDetails() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";

        // Set callback and perform API call
        GetLoan200 result = null;
        try {
            result = controller.getLoanDetails(clientName, loanId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"product_id\":1,\"principal_amount\":1000.0,\"inter"
                + "est_rate\":14.0,\"tenure\":2,\"tenure_frequency\":\"monthly\",\"cibil_score\":0,"
                + "\"purpose\":\"\",\"repayment_frequency\":\"monthly\",\"number_of_repayments\":2,"
                + "\"status\":\"agreement_signed\",\"principal_outstanding\":1000.0,\"reject_reason"
                + "\":\"null\",\"applicants\":[{\"id\":455,\"first_name\":\"Smith\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * # Update Post Disbursement API This endpoint can be used to update the loan status to
     * agreement signed. **Expected Loan Status: "approved"** ## Request Params <table> <thead> <tr>
     * <th>Field</th> <th>Type</th> <th>Format</th> <th>Required</th> <th>Description</th>
     * <th>Example</th> </tr> </thead> <tbody> <tr> <td>customer_type</td> <td>string</td> <td></td>
     * <td>false</td> <td>Individual / Non-Individual</td> <td>customer_type_30</td> </tr> <tr>
     * <td>customer_category</td> <td>string</td> <td></td> <td>false</td> <td>Salaried /
     * Self-Empolyed</td> <td>customer_category_10</td> </tr> <tr> <td>first_name</td>
     * <td>string</td> <td></td> <td>false</td> <td>First Name of the Customer</td>
     * <td>first_name_65</td> </tr> <tr> <td>middle_name</td> <td>string</td> <td></td>
     * <td>false</td> <td>Middle Name of the Customer</td> <td>middle_name_82</td> </tr> <tr>
     * <td>last_name</td> <td>string</td> <td></td> <td>false</td> <td>Last Name of the
     * Customer</td> <td>last_name_66</td> </tr> <tr> <td>gender</td> <td>string</td> <td></td>
     * <td>false</td> <td>M / F / O</td> <td>gender_14</td> </tr> <tr> <td>date_of_birth</td>
     * <td>string</td> <td>date</td> <td>false</td> <td>Date of Birth (YYYY-MM-DD)</td>
     * <td>2020-12-25</td> </tr> <tr> <td>age</td> <td>integer</td> <td></td> <td>false</td> <td>Age
     * in years</td> <td>803</td> </tr> <tr> <td>mobile_number</td> <td>string</td> <td></td>
     * <td>false</td> <td>Mobile Number of the Customer (10 digits)</td> <td>mobile_number_25</td>
     * </tr> <tr> <td>personal_email_id</td> <td>string</td> <td></td> <td>false</td> <td>Personal
     * Email ID of the Customer</td> <td>personal_email_id_75</td> </tr> <tr>
     * <td>official_email_id</td> <td>string</td> <td></td> <td>false</td> <td>Official Email ID of
     * the Customer</td> <td>official_email_id_49</td> </tr> <tr> <td>current_address</td>
     * <td>string</td> <td></td> <td>false</td> <td>Free flowing text</td>
     * <td>current_address_49</td> </tr> <tr> <td>current_city</td> <td>string</td> <td></td>
     * <td>false</td> <td>City in which applicant is currently residing</td>
     * <td>current_city_32</td> </tr> <tr> <td>current_district</td> <td>string</td> <td></td>
     * <td>false</td> <td>District in which applicant is currently residing</td>
     * <td>current_district_72</td> </tr> <tr> <td>current_state</td> <td>string</td> <td></td>
     * <td>false</td> <td>State in which applicant is currently residing</td>
     * <td>current_state_54</td> </tr> <tr> <td>current_pincode</td> <td>integer</td> <td></td>
     * <td>false</td> <td>Pincode of the current address</td> <td>345</td> </tr> <tr>
     * <td>residence_type_current_address</td> <td>string</td> <td></td> <td>false</td> <td>Rented /
     * Owned / Leased</td> <td>residence_type_current_address_49</td> </tr> <tr>
     * <td>years_of_stay_in_current_address</td> <td>integer</td> <td></td> <td>false</td> <td>How
     * many years stayed in the current address</td> <td>447</td> </tr> <tr>
     * <td>permanent_address</td> <td>string</td> <td></td> <td>false</td> <td>Free flowing
     * text</td> <td>permanent_address_69</td> </tr> <tr> <td>permanent_city</td> <td>string</td>
     * <td></td> <td>false</td> <td>City in which applicant is currently residing</td>
     * <td>permanent_city_15</td> </tr> <tr> <td>permanent_district</td> <td>string</td> <td></td>
     * <td>false</td> <td>District in which applicant is currently residing</td>
     * <td>permanent_district_12</td> </tr> <tr> <td>permanent_state</td> <td>string</td> <td></td>
     * <td>false</td> <td>State in which applicant is currently residing</td>
     * <td>permanent_state_60</td> </tr> <tr> <td>permanent_pincode</td> <td>integer</td> <td></td>
     * <td>false</td> <td>Pincode of the current address</td> <td>180</td> </tr> <tr>
     * <td>residence_type_permanent_address</td> <td>string</td> <td></td> <td>false</td> <td>Rented
     * / Owned / Leased</td> <td>residence_type_permanent_address_82</td> </tr> <tr>
     * <td>years_of_stay_in_permanent_address</td> <td>integer</td> <td></td> <td>false</td> <td>How
     * many years stayed in the permanent address</td> <td>170</td> </tr> <tr>
     * <td>marital_status</td> <td>string</td> <td></td> <td>false</td> <td>Married / Unmarried</td>
     * <td>marital_status_85</td> </tr> <tr> <td>religion</td> <td>string</td> <td></td>
     * <td>false</td> <td>Religion of the Customer</td> <td>religion_80</td> </tr> <tr>
     * <td>nationality</td> <td>string</td> <td></td> <td>false</td> <td>Nationality of the
     * Customer</td> <td>nationality_70</td> </tr> <tr> <td>father_name</td> <td>string</td>
     * <td></td> <td>false</td> <td>Father Name of the Customer</td> <td>father_name_96</td> </tr>
     * <tr> <td>mother_name</td> <td>string</td> <td></td> <td>false</td> <td>Mother Name of the
     * Customer</td> <td>mother_name_89</td> </tr> <tr> <td>spouse_name</td> <td>string</td>
     * <td></td> <td>false</td> <td>Spouse Name of the Customer</td> <td>spouse_name_75</td> </tr>
     * <tr> <td>education_qualification</td> <td>string</td> <td></td> <td>false</td> <td>Free
     * flowing text</td> <td>education_qualification_85</td> </tr> <tr> <td>net_monthly_income</td>
     * <td>number</td> <td>float</td> <td>false</td> <td>Monthly Income of the Customer (in
     * Rupees)</td> <td>7.877011107426441</td> </tr> <tr> <td>annual_income</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Income of the Customer (in Rupees)</td>
     * <td>9.421437195881696</td> </tr> <tr> <td>number_of_dependants</td> <td>integer</td>
     * <td></td> <td>false</td> <td></td> <td>482</td> </tr> <tr> <td>occupation</td>
     * <td>string</td> <td></td> <td>false</td> <td>Salaried / Business / Retired / Self-Employed /
     * Others</td> <td>occupation_85</td> </tr> <tr> <td>pan_number</td> <td>string</td> <td></td>
     * <td>false</td> <td>PAN Number of the Customer (10 digit Alphanumeric)</td>
     * <td>pan_number_16</td> </tr> <tr> <td>pan_link</td> <td>array</td> <td></td> <td>false</td>
     * <td>PAN Document Link</td> <td>[&quot;pan_link_89&quot;, &quot;pan_link_99&quot;]</td> </tr>
     * <tr> <td>form_60_link</td> <td>array</td> <td></td> <td>false</td> <td>Form 60 Doument Link
     * (If applicable)</td> <td>[&quot;form_60_link_92&quot;, &quot;form_60_link_69&quot;]</td>
     * </tr> <tr> <td>aadhar_number</td> <td>string</td> <td></td> <td>false</td> <td>Aadhar Number
     * of the Customer (12 digits)</td> <td>aadhar_number_61</td> </tr> <tr> <td>aadhar_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>Aadhar Document Link</td>
     * <td>[&quot;aadhar_link_46&quot;, &quot;aadhar_link_81&quot;]</td> </tr> <tr>
     * <td>voter_id_number</td> <td>string</td> <td></td> <td>false</td> <td>Voter ID Number of the
     * Customer</td> <td>voter_id_number_72</td> </tr> <tr> <td>voting_id_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Voter Document Link</td> <td>[&quot;voting_id_link_55&quot;,
     * &quot;voting_id_link_88&quot;]</td> </tr> <tr> <td>driving_license_number</td>
     * <td>string</td> <td></td> <td>false</td> <td>Driving License Number of the Customer</td>
     * <td>driving_license_number_50</td> </tr> <tr> <td>driving_license_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Driving License Document Link</td>
     * <td>[&quot;driving_license_link_30&quot;, &quot;driving_license_link_21&quot;]</td> </tr>
     * <tr> <td>passport_number</td> <td>string</td> <td></td> <td>false</td> <td>Passport Number of
     * the Customer</td> <td>passport_number_78</td> </tr> <tr> <td>passport_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>Passport Document Link</td>
     * <td>[&quot;passport_link_48&quot;, &quot;passport_link_94&quot;]</td> </tr> <tr>
     * <td>video_kyc_link</td> <td>array</td> <td></td> <td>false</td> <td>Video KYC of the
     * Applicant</td> <td>[&quot;video_kyc_link_13&quot;, &quot;video_kyc_link_60&quot;]</td> </tr>
     * <tr> <td>video_kyc_profile_id</td> <td>string</td> <td></td> <td>false</td> <td>Required if
     * video KYC is done. Profile ID of the case as per the video KYC vendor</td>
     * <td>video_kyc_profile_id_20</td> </tr> <tr> <td>video_kyc_account_id</td> <td>string</td>
     * <td></td> <td>false</td> <td>Required if video KYC is done. Account ID of the case as per the
     * video KYC vendor</td> <td>video_kyc_account_id_87</td> </tr> <tr> <td>video_kyc_key</td>
     * <td>string</td> <td></td> <td>false</td> <td>Required if video KYC is done. Key as per the
     * video KYC vendor</td> <td>video_kyc_key_16</td> </tr> <tr> <td>other_kyc_number</td>
     * <td>string</td> <td></td> <td>false</td> <td>KYC Number of the Customer</td>
     * <td>other_kyc_number_77</td> </tr> <tr> <td>other_kyc_link</td> <td>array</td> <td></td>
     * <td>false</td> <td>KYC Image of the Customer</td> <td>[&quot;other_kyc_link_70&quot;,
     * &quot;other_kyc_link_18&quot;]</td> </tr> <tr> <td>rent_agreement_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Rent Agreement Document Link</td>
     * <td>[&quot;rent_agreement_link_90&quot;, &quot;rent_agreement_link_27&quot;]</td> </tr> <tr>
     * <td>utility_bills_link</td> <td>array</td> <td></td> <td>false</td> <td>Utility Bills Copies
     * (If any)</td> <td>[&quot;utility_bills_link_14&quot;, &quot;utility_bills_link_22&quot;]</td>
     * </tr> <tr> <td>photo_link</td> <td>array</td> <td></td> <td>false</td> <td>Photo Image of the
     * Customer</td> <td>[&quot;photo_link_21&quot;, &quot;photo_link_78&quot;]</td> </tr> <tr>
     * <td>employment_type</td> <td>string</td> <td></td> <td>false</td> <td>Salaried /
     * Self-Employed</td> <td>employment_type_24</td> </tr> <tr> <td>employment_details_name</td>
     * <td>string</td> <td></td> <td>false</td> <td>Employer Name</td>
     * <td>employment_details_name_40</td> </tr> <tr> <td>employment_details_address</td>
     * <td>string</td> <td></td> <td>false</td> <td>Office Address</td>
     * <td>employment_details_address_18</td> </tr> <tr>
     * <td>employment_details_years_of_experience</td> <td>number</td> <td>float</td> <td>false</td>
     * <td>Applicant&#39;s years of experience in the current organization</td>
     * <td>5.4280555177273335</td> </tr> <tr> <td>employment_details_designation</td>
     * <td>string</td> <td></td> <td>false</td> <td>Applicant&#39;s Current Designation</td>
     * <td>employment_details_designation_61</td> </tr> <tr> <td>payslip_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Last 3 Months Payslips</td> <td>[&quot;payslip_link_94&quot;,
     * &quot;payslip_link_72&quot;]</td> </tr> <tr> <td>tds_certificate_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Last 3 Years TDS Certificate</td>
     * <td>[&quot;tds_certificate_link_98&quot;, &quot;tds_certificate_link_46&quot;]</td> </tr>
     * <tr> <td>name_of_bureau</td> <td>string</td> <td></td> <td>false</td> <td>CIBIL / Experian /
     * Himark</td> <td>name_of_bureau_33</td> </tr> <tr> <td>bureau_vintage</td> <td>integer</td>
     * <td></td> <td>false</td> <td>Vintage in the bureau. Number of years from the first trade
     * line</td> <td>541</td> </tr> <tr> <td>bureau_score</td> <td>integer</td> <td></td>
     * <td>false</td> <td></td> <td>783</td> </tr> <tr> <td>bureau_report_link</td> <td>array</td>
     * <td></td> <td>false</td> <td>Bureau Report PDF</td> <td>[&quot;bureau_report_link_27&quot;,
     * &quot;bureau_report_link_85&quot;]</td> </tr> <tr> <td>commercial_bureau_score</td>
     * <td>integer</td> <td></td> <td>false</td> <td></td> <td>942</td> </tr> <tr>
     * <td>commercial_bureau_score_link</td> <td>array</td> <td></td> <td>false</td> <td>Commercial
     * Bureau Document</td> <td>[&quot;commercial_bureau_score_link_82&quot;,
     * &quot;commercial_bureau_score_link_72&quot;]</td> </tr> <tr>
     * <td>partner_score_on_the_customer</td> <td>integer</td> <td></td> <td>false</td> <td>Score
     * Captured by the Partner</td> <td>938</td> </tr> <tr> <td>total_existing_obligations</td>
     * <td>integer</td> <td></td> <td>false</td> <td>Total Existing Obligations basis the Bureau
     * Report</td> <td>74</td> </tr> <tr> <td>credit_card_limit</td> <td>integer</td> <td></td>
     * <td>false</td> <td>Total Credit Card Limit basis the Bureau Report</td> <td>880</td> </tr>
     * <tr> <td>number_of_credit_cards</td> <td>integer</td> <td></td> <td>false</td> <td>Total
     * Number of Credit Cards per Bureau Report</td> <td>151</td> </tr> <tr>
     * <td>number_of_unsecured_loans</td> <td>integer</td> <td></td> <td>false</td> <td>Total Number
     * of Unsecured Loans per Bureau Report</td> <td>487</td> </tr> <tr>
     * <td>value_of_total_unsecured_loans</td> <td>number</td> <td>float</td> <td>false</td>
     * <td></td> <td>6.993667539564163</td> </tr> <tr> <td>number_of_loans</td> <td>integer</td>
     * <td></td> <td>false</td> <td>Total Number of Loans per Bureau Report</td> <td>847</td> </tr>
     * <tr> <td>value_of_total_loans</td> <td>number</td> <td>float</td> <td>false</td> <td></td>
     * <td>4.831926611585921</td> </tr> <tr> <td>number_of_enquiries_3months</td> <td>integer</td>
     * <td></td> <td>false</td> <td>Number of Enquiries in the Last 3 Months per Bureau Report</td>
     * <td>334</td> </tr> <tr> <td>number_of_enquiries_6months</td> <td>integer</td> <td></td>
     * <td>false</td> <td>Number of Enquiries in the Last 6 Months per Bureau Report</td>
     * <td>541</td> </tr> <tr> <td>number_of_enquiries_12months</td> <td>integer</td> <td></td>
     * <td>false</td> <td>Number of Enquiries in the Last 12 Months per Bureau Report</td>
     * <td>513</td> </tr> <tr> <td>number_of_writeoff_suitfiled_settled_12months</td>
     * <td>integer</td> <td></td> <td>false</td> <td>Number of Writeoff Suitfiled Settled in the
     * Last 12 Months</td> <td>485</td> </tr> <tr> <td>max_dpd_tradeline_12months</td>
     * <td>integer</td> <td></td> <td>false</td> <td>Maximum DPD Tradeline in the Last 12
     * Months</td> <td>1000</td> </tr> <tr> <td>max_overdue_tradeline</td> <td>integer</td>
     * <td></td> <td>false</td> <td>Maximum Overdue Tradeline</td> <td>212</td> </tr> <tr>
     * <td>total_overdue_amount_12months</td> <td>number</td> <td>float</td> <td>false</td>
     * <td>Total Overdue Amount in the Last 12 Months</td> <td>8.614892533716507</td> </tr> <tr>
     * <td>loan_amount_settled_12months</td> <td>number</td> <td>float</td> <td>false</td> <td>Loan
     * Amount Settled in the Last 12 Months</td> <td>3.0829691356942246</td> </tr> <tr>
     * <td>nature_of_loan_settled_1</td> <td>string</td> <td></td> <td>false</td> <td></td>
     * <td>nature_of_loan_settled_1_36</td> </tr> <tr> <td>nature_of_loan_settled_2</td>
     * <td>string</td> <td></td> <td>false</td> <td></td> <td>nature_of_loan_settled_2_56</td> </tr>
     * <tr> <td>total_emi_bounces</td> <td>integer</td> <td></td> <td>false</td> <td></td>
     * <td>222</td> </tr> <tr> <td>emi_bounces_6months</td> <td>integer</td> <td></td>
     * <td>false</td> <td>EMI Bounces in the Last 6 Months</td> <td>831</td> </tr> <tr>
     * <td>emi_bounces_12months</td> <td>integer</td> <td></td> <td>false</td> <td>EMI Bounces in
     * the Last 12 Months</td> <td>728</td> </tr> <tr>
     * <td>bank_statement_savings_account_12_months_link</td> <td>array</td> <td></td>
     * <td>false</td> <td>Savings Bank Account Statement for the Last 12 Months</td>
     * <td>[&quot;bank_statement_savings_account_12_months_link_21&quot;,
     * &quot;bank_statement_savings_account_12_months_link_97&quot;]</td> </tr> <tr>
     * <td>bank_statement_current_account_12_months_link</td> <td>array</td> <td></td>
     * <td>false</td> <td>Current Account Bank Account Statement for the Last 12 Months</td>
     * <td>[&quot;bank_statement_current_account_12_months_link_10&quot;,
     * &quot;bank_statement_current_account_12_months_link_90&quot;]</td> </tr> <tr>
     * <td>no_of_inward_chq_returns_savings_account</td> <td>array</td> <td></td> <td>false</td>
     * <td></td> <td>[802, 951]</td> </tr> <tr> <td>no_of_outward_chq_returns_savings_account</td>
     * <td>array</td> <td></td> <td>false</td> <td></td> <td>[64, 995]</td> </tr> <tr>
     * <td>no_of_inward_chq_returns_current_account</td> <td>array</td> <td></td> <td>false</td>
     * <td></td> <td>[640, 745]</td> </tr> <tr> <td>no_of_outward_chq_returns_current_account</td>
     * <td>array</td> <td></td> <td>false</td> <td></td> <td>[884, 908]</td> </tr> <tr>
     * <td>bank_account_type_for_assessment</td> <td>string</td> <td></td> <td>false</td>
     * <td>Savings / Current / Overdraft / CC</td> <td>bank_account_type_for_assessment_38</td>
     * </tr> <tr> <td>perfios_link</td> <td>array</td> <td></td> <td>false</td> <td>JSON of
     * Perfios/Finbit</td> <td>[&quot;perfios_link_13&quot;, &quot;perfios_link_35&quot;]</td> </tr>
     * <tr> <td>abb</td> <td>number</td> <td>float</td> <td>false</td> <td>Average Bank Balance
     * maintaiend on the EMI dates (Calculated by the Originator for the Last 12 Months)</td>
     * <td>7.08868369666879</td> </tr> <tr> <td>abd</td> <td>number</td> <td>float</td>
     * <td>false</td> <td>Average Monthly Bank Deposits for the Last 12 Months</td>
     * <td>6.619750204289035</td> </tr> <tr> <td>annual_business_turnover</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Business Turnover (in Rupees)</td>
     * <td>8.48746274984273</td> </tr> <tr> <td>annual_gross_profit</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Gross Profit (in Rupees)</td>
     * <td>3.5282845684784183</td> </tr> <tr> <td>annual_business_ebitda</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Business EBITDA (in Rupees)</td>
     * <td>5.70759204932318</td> </tr> <tr> <td>annual_net_income</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Net Income (in Rupees)</td>
     * <td>3.2278916054470033</td> </tr> <tr> <td>monthly_net_profit</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Monthly Net Profit (in Rupees)</td>
     * <td>2.63960278752009</td> </tr> <tr> <td>annual_net_profit</td> <td>number</td>
     * <td>float</td> <td>false</td> <td>Annual Net Profit (in Rupees)</td>
     * <td>8.25088019358928</td> </tr> <tr> <td>gst_return_year_1_link</td> <td>array</td> <td></td>
     * <td>false</td> <td>GST Return Document for the Last Year</td>
     * <td>[&quot;gst_return_year_1_link_61&quot;, &quot;gst_return_year_1_link_89&quot;]</td> </tr>
     * <tr> <td>gst_return_year_2_link</td> <td>array</td> <td></td> <td>false</td> <td>GST Return
     * Document for the Last Year - 1</td> <td>[&quot;gst_return_year_2_link_87&quot;,
     * &quot;gst_return_year_2_link_28&quot;]</td> </tr> <tr> <td>gst_return_year_3_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>GST Return Document for the Last Year - 2</td>
     * <td>[&quot;gst_return_year_3_link_87&quot;, &quot;gst_return_year_3_link_27&quot;]</td> </tr>
     * <tr> <td>it_return_year_1_link</td> <td>array</td> <td></td> <td>false</td> <td>IT Return
     * Document for the Last Year</td> <td>[&quot;it_return_year_1_link_72&quot;,
     * &quot;it_return_year_1_link_25&quot;]</td> </tr> <tr> <td>it_return_year_2_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>IT Return Document for the Last Year - 1</td>
     * <td>[&quot;it_return_year_2_link_83&quot;, &quot;it_return_year_2_link_38&quot;]</td> </tr>
     * <tr> <td>it_return_year_3_link</td> <td>array</td> <td></td> <td>false</td> <td>IT Return
     * Document for the Last Year - 2</td> <td>[&quot;it_return_year_3_link_48&quot;,
     * &quot;it_return_year_3_link_29&quot;]</td> </tr> <tr>
     * <td>other_income_assessment_proof_link</td> <td>array</td> <td></td> <td>false</td>
     * <td>Kachcha/Pucca Bill Copies</td> <td>[&quot;other_income_assessment_proof_link_49&quot;,
     * &quot;other_income_assessment_proof_link_33&quot;]</td> </tr> <tr> <td>cam_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>CAM Document Link</td>
     * <td>[&quot;cam_link_56&quot;, &quot;cam_link_96&quot;]</td> </tr> <tr> <td>cfa_link</td>
     * <td>array</td> <td></td> <td>false</td> <td>CFA Document Link</td>
     * <td>[&quot;cfa_link_32&quot;, &quot;cfa_link_29&quot;]</td> </tr> <tr> <td>abb_emi_ratio</td>
     * <td>number</td> <td>float</td> <td>false</td> <td></td> <td>3.393834559378286</td> </tr> <tr>
     * <td>dscr</td> <td>number</td> <td>float</td> <td>false</td> <td>Debt Service Coverage
     * Ratio</td> <td>7.467900230831925</td> </tr> <tr> <td>foir</td> <td>number</td> <td>float</td>
     * <td>false</td> <td>Fixed Obligations to Income Ratio</td> <td>3.715947285518811</td> </tr>
     * <tr> <td>ltr</td> <td>number</td> <td>float</td> <td>false</td> <td>Loan Transfer Ratio</td>
     * <td>7.305956605637732</td> </tr> <tr> <td>eligibility_loan_amount</td> <td>number</td>
     * <td>float</td> <td>false</td> <td></td> <td>5.128092635738042</td> </tr> <tr>
     * <td>credit_insurance_insurer</td> <td>string</td> <td></td> <td>false</td> <td>Insurer Name
     * (If Credit Shield Insurance is taken)</td> <td>credit_insurance_insurer_84</td> </tr> <tr>
     * <td>credit_insurance_nominee_details</td> <td>string</td> <td></td> <td>false</td> <td>Name
     * of the Nominee (If Credit Shield Insurance is taken)</td>
     * <td>credit_insurance_nominee_details_70</td> </tr> <tr>
     * <td>credit_insurance_relationship</td> <td>string</td> <td></td> <td>false</td>
     * <td>Relationship of the Nominee (If Credit Shield Insurance is taken)</td>
     * <td>credit_insurance_relationship_34</td> </tr> <tr> <td>credit_insurance_premium</td>
     * <td>number</td> <td>float</td> <td>false</td> <td>Premium Amount (If Credit Shield Insurance
     * is taken)</td> <td>0.33692173129690195</td> </tr> <tr> <td>credit_insurance_amount</td>
     * <td>number</td> <td>float</td> <td>false</td> <td>Total Insurance Amount (If Credit Shield
     * Insurance is taken)</td> <td>4.805442983096883</td> </tr> <tr>
     * <td>credit_insurance_policy_number</td> <td>string</td> <td></td> <td>false</td> <td>Policy
     * Number (If Credit Shield Insurance is taken)</td> <td>credit_insurance_policy_number_98</td>
     * </tr> <tr> <td>asset_insurance_insurer</td> <td>string</td> <td></td> <td>false</td>
     * <td>Insurer Name</td> <td>asset_insurance_insurer_11</td> </tr> <tr>
     * <td>asset_insurance_nominee_details</td> <td>string</td> <td></td> <td>false</td> <td>Name of
     * the Nominee</td> <td>asset_insurance_nominee_details_64</td> </tr> <tr>
     * <td>asset_insurance_premium</td> <td>number</td> <td>float</td> <td>false</td> <td>Premium
     * Amount (in Rupees)</td> <td>9.599245346793362</td> </tr> <tr> <td>asset_insurance_amount</td>
     * <td>number</td> <td>float</td> <td>false</td> <td>Total Insurance Amount (in Rupees)</td>
     * <td>0.45084683726222985</td> </tr> <tr> <td>asset_insurance_policy_number</td>
     * <td>string</td> <td></td> <td>false</td> <td></td> <td>asset_insurance_policy_number_57</td>
     * </tr> <tr> <td>psl_flag</td> <td>string</td> <td></td> <td>false</td> <td></td>
     * <td>psl_flag_28</td> </tr> <tr> <td>psl_description</td> <td>string</td> <td></td>
     * <td>false</td> <td></td> <td>psl_description_21</td> </tr> <tr> <td>psl_code</td>
     * <td>string</td> <td></td> <td>false</td> <td></td> <td>psl_code_19</td> </tr> <tr>
     * <td>psl_proof_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;psl_proof_link_67&quot;, &quot;psl_proof_link_11&quot;]</td> </tr> <tr>
     * <td>loan_agreement_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;loan_agreement_link_18&quot;, &quot;loan_agreement_link_28&quot;]</td> </tr> <tr>
     * <td>sanction_letter_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;sanction_letter_link_35&quot;, &quot;sanction_letter_link_16&quot;]</td> </tr>
     * <tr> <td>laf_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;laf_link_27&quot;, &quot;laf_link_41&quot;]</td> </tr> <tr>
     * <td>self_declaration_letter_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;self_declaration_letter_link_75&quot;,
     * &quot;self_declaration_letter_link_57&quot;]</td> </tr> <tr>
     * <td>authorisation_letter_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;authorisation_letter_link_44&quot;, &quot;authorisation_letter_link_87&quot;]</td>
     * </tr> <tr> <td>enach_pdc_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;enach_pdc_link_39&quot;, &quot;enach_pdc_link_27&quot;]</td> </tr> <tr>
     * <td>guarantor_agreements_link</td> <td>array</td> <td></td> <td>false</td> <td></td>
     * <td>[&quot;guarantor_agreements_link_82&quot;, &quot;guarantor_agreements_link_55&quot;]</td>
     * </tr> </tbody> </table> ## Response Codes <table border="2" cellspacing="0" cellpadding="6"
     * rules="groups" frame="hsides"> <thead> <tr> <th scope="col" class="org-right">Code</th> <th
     * scope="col" class="org-left">Message</th> <th scope="col" class="org-left">Reason</th> </tr>
     * </thead> <tbody> <tr> <td class="org-right">204</td> <td class="org-left">No content</td> <td
     * class="org-left">Success</td> </tr> <tr> <td class="org-right">401</td> <td
     * class="org-left">Unauthorized</td> <td class="org-left">Invalid API Key</td> </tr> <tr> <td
     * class="org-right">400</td> <td class="org-left">Bad Request</td> <td
     * class="org-left"><ul><li>Failed due to invalid request format</li> <li>Missing required
     * parameters</li> <li>Loan is in invalid state</li> </td> </tr> <tr> <td
     * class="org-right">404</td> <td class="org-left">Not found</td> <td class="org-left">Loan not
     * found</td> </tr> <tr> <td class="org-right">500</td> <td class="org-left">Internal Server
     * Error</td> <td class="org-left">Error occurred in the backend</td> </tr> </tbody> </table> .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdatePostDisbursement() throws Exception {
        // Parameters for the API call
        String clientName = 
                "krazybee";
        String loanId = 
                "AB001";
        ClientsApiLoansUpdatePostDisbursementRequest body = ApiHelper.deserialize(
                "{\"customer_type\":\"customer_type_30\",\"customer_category\":\"customer_category_"
                + "10\",\"first_name\":\"first_name_65\",\"middle_name\":\"middle_name_82\",\"last_"
                + "name\":\"last_name_66\",\"gender\":\"gender_14\",\"date_of_birth\":\"2020-12-25"
                + "\",\"age\":803,\"mobile_number\":\"mobile_number_25\",\"personal_email_id\":\"pe"
                + "rsonal_email_id_75\",\"official_email_id\":\"official_email_id_49\",\"current_ad"
                + "dress\":\"current_address_49\",\"current_city\":\"current_city_32\",\"current_di"
                + "strict\":\"current_district_72\",\"current_state\":\"current_state_54\",\"curren"
                + "t_pincode\":345,\"residence_type_current_address\":\"residence_type_current_addr"
                + "ess_49\",\"years_of_stay_in_current_address\":447,\"permanent_address\":\"perman"
                + "ent_address_69\",\"permanent_city\":\"permanent_city_15\",\"permanent_district"
                + "\":\"permanent_district_12\",\"permanent_state\":\"permanent_state_60\",\"perman"
                + "ent_pincode\":180,\"residence_type_permanent_address\":\"residence_type_permanen"
                + "t_address_82\",\"years_of_stay_in_permanent_address\":170,\"marital_status\":\"m"
                + "arital_status_85\",\"religion\":\"religion_80\",\"nationality\":\"nationality_70"
                + "\",\"father_name\":\"father_name_96\",\"mother_name\":\"mother_name_89\",\"spous"
                + "e_name\":\"spouse_name_75\",\"education_qualification\":\"education_qualificatio"
                + "n_85\",\"net_monthly_income\":7.8770111074264406,\"annual_income\":9.42143719588"
                + "16958,\"number_of_dependants\":482,\"occupation\":\"occupation_85\",\"pan_number"
                + "\":\"pan_number_16\",\"pan_link\":[\"pan_link_89\",\"pan_link_99\"],\"form_60_li"
                + "nk\":[\"form_60_link_92\",\"form_60_link_69\"],\"aadhar_number\":\"aadhar_number"
                + "_61\",\"aadhar_link\":[\"aadhar_link_46\",\"aadhar_link_81\"],\"voter_id_number"
                + "\":\"voter_id_number_72\",\"voting_id_link\":[\"voting_id_link_55\",\"voting_id_"
                + "link_88\"],\"driving_license_number\":\"driving_license_number_50\",\"driving_li"
                + "cense_link\":[\"driving_license_link_30\",\"driving_license_link_21\"],\"passpor"
                + "t_number\":\"passport_number_78\",\"passport_link\":[\"passport_link_48\",\"pass"
                + "port_link_94\"],\"video_kyc_link\":[\"video_kyc_link_13\",\"video_kyc_link_60\"]"
                + ",\"video_kyc_profile_id\":\"video_kyc_profile_id_20\",\"video_kyc_account_id\":"
                + "\"video_kyc_account_id_87\",\"video_kyc_key\":\"video_kyc_key_16\",\"other_kyc_n"
                + "umber\":\"other_kyc_number_77\",\"other_kyc_link\":[\"other_kyc_link_70\",\"othe"
                + "r_kyc_link_18\"],\"rent_agreement_link\":[\"rent_agreement_link_90\",\"rent_agre"
                + "ement_link_27\"],\"utility_bills_link\":[\"utility_bills_link_14\",\"utility_bil"
                + "ls_link_22\"],\"photo_link\":[\"photo_link_21\",\"photo_link_78\"],\"employment_"
                + "type\":\"employment_type_24\",\"employment_details_name\":\"employment_details_n"
                + "ame_40\",\"employment_details_address\":\"employment_details_address_18\",\"empl"
                + "oyment_details_years_of_experience\":5.4280555177273335,\"employment_details_des"
                + "ignation\":\"employment_details_designation_61\",\"payslip_link\":[\"payslip_lin"
                + "k_94\",\"payslip_link_72\"],\"tds_certificate_link\":[\"tds_certificate_link_98"
                + "\",\"tds_certificate_link_46\"],\"name_of_bureau\":\"name_of_bureau_33\",\"burea"
                + "u_vintage\":541,\"bureau_score\":783,\"bureau_report_link\":[\"bureau_report_lin"
                + "k_27\",\"bureau_report_link_85\"],\"commercial_bureau_score\":942,\"commercial_b"
                + "ureau_score_link\":[\"commercial_bureau_score_link_82\",\"commercial_bureau_scor"
                + "e_link_72\"],\"partner_score_on_the_customer\":938,\"total_existing_obligations"
                + "\":74,\"credit_card_limit\":880,\"number_of_credit_cards\":151,\"number_of_unsec"
                + "ured_loans\":487,\"value_of_total_unsecured_loans\":6.9936675395641634,\"number_"
                + "of_loans\":847,\"value_of_total_loans\":4.8319266115859207,\"number_of_enquiries"
                + "_3months\":334,\"number_of_enquiries_6months\":541,\"number_of_enquiries_12month"
                + "s\":513,\"number_of_writeoff_suitfiled_settled_12months\":485,\"max_dpd_tradelin"
                + "e_12months\":1000,\"max_overdue_tradeline\":212,\"total_overdue_amount_12months"
                + "\":8.6148925337165068,\"loan_amount_settled_12months\":3.0829691356942246,\"natu"
                + "re_of_loan_settled_1\":\"nature_of_loan_settled_1_36\",\"nature_of_loan_settled_"
                + "2\":\"nature_of_loan_settled_2_56\",\"total_emi_bounces\":222,\"emi_bounces_6mon"
                + "ths\":831,\"emi_bounces_12months\":728,\"bank_statement_savings_account_12_month"
                + "s_link\":[\"bank_statement_savings_account_12_months_link_21\",\"bank_statement_"
                + "savings_account_12_months_link_97\"],\"bank_statement_current_account_12_months_"
                + "link\":[\"bank_statement_current_account_12_months_link_10\",\"bank_statement_cu"
                + "rrent_account_12_months_link_90\"],\"no_of_inward_chq_returns_savings_account\":"
                + "[802,951],\"no_of_outward_chq_returns_savings_account\":[64,995],\"no_of_inward_"
                + "chq_returns_current_account\":[640,745],\"no_of_outward_chq_returns_current_acco"
                + "unt\":[884,908],\"bank_account_type_for_assessment\":\"bank_account_type_for_ass"
                + "essment_38\",\"perfios_link\":[\"perfios_link_13\",\"perfios_link_35\"],\"abb\":"
                + "7.08868369666879,\"abd\":6.6197502042890353,\"annual_business_turnover\":8.48746"
                + "274984273,\"annual_gross_profit\":3.5282845684784183,\"annual_business_ebitda\":"
                + "5.70759204932318,\"annual_net_income\":3.2278916054470033,\"monthly_net_profit"
                + "\":2.63960278752009,\"annual_net_profit\":8.25088019358928,\"gst_return_year_1_l"
                + "ink\":[\"gst_return_year_1_link_61\",\"gst_return_year_1_link_89\"],\"gst_return"
                + "_year_2_link\":[\"gst_return_year_2_link_87\",\"gst_return_year_2_link_28\"],\"g"
                + "st_return_year_3_link\":[\"gst_return_year_3_link_87\",\"gst_return_year_3_link_"
                + "27\"],\"it_return_year_1_link\":[\"it_return_year_1_link_72\",\"it_return_year_1"
                + "_link_25\"],\"it_return_year_2_link\":[\"it_return_year_2_link_83\",\"it_return_"
                + "year_2_link_38\"],\"it_return_year_3_link\":[\"it_return_year_3_link_48\",\"it_r"
                + "eturn_year_3_link_29\"],\"other_income_assessment_proof_link\":[\"other_income_a"
                + "ssessment_proof_link_49\",\"other_income_assessment_proof_link_33\"],\"cam_link"
                + "\":[\"cam_link_56\",\"cam_link_96\"],\"cfa_link\":[\"cfa_link_32\",\"cfa_link_29"
                + "\"],\"abb_emi_ratio\":3.3938345593782859,\"dscr\":7.4679002308319253,\"foir\":3."
                + "7159472855188111,\"ltr\":7.3059566056377321,\"eligibility_loan_amount\":5.128092"
                + "6357380423,\"credit_insurance_insurer\":\"credit_insurance_insurer_84\",\"credit"
                + "_insurance_nominee_details\":\"credit_insurance_nominee_details_70\",\"credit_in"
                + "surance_relationship\":\"credit_insurance_relationship_34\",\"credit_insurance_p"
                + "remium\":0.33692173129690195,\"credit_insurance_amount\":4.8054429830968832,\"cr"
                + "edit_insurance_policy_number\":\"credit_insurance_policy_number_98\",\"asset_ins"
                + "urance_insurer\":\"asset_insurance_insurer_11\",\"asset_insurance_nominee_detail"
                + "s\":\"asset_insurance_nominee_details_64\",\"asset_insurance_premium\":9.5992453"
                + "467933618,\"asset_insurance_amount\":0.45084683726222985,\"asset_insurance_polic"
                + "y_number\":\"asset_insurance_policy_number_57\",\"psl_flag\":\"psl_flag_28\",\"p"
                + "sl_description\":\"psl_description_21\",\"psl_code\":\"psl_code_19\",\"psl_proof"
                + "_link\":[\"psl_proof_link_67\",\"psl_proof_link_11\"],\"loan_agreement_link\":["
                + "\"loan_agreement_link_18\",\"loan_agreement_link_28\"],\"sanction_letter_link\":"
                + "[\"sanction_letter_link_35\",\"sanction_letter_link_16\"],\"laf_link\":[\"laf_li"
                + "nk_27\",\"laf_link_41\"],\"self_declaration_letter_link\":[\"self_declaration_le"
                + "tter_link_75\",\"self_declaration_letter_link_57\"],\"authorisation_letter_link"
                + "\":[\"authorisation_letter_link_44\",\"authorisation_letter_link_87\"],\"enach_p"
                + "dc_link\":[\"enach_pdc_link_39\",\"enach_pdc_link_27\"],\"guarantor_agreements_l"
                + "ink\":[\"guarantor_agreements_link_82\",\"guarantor_agreements_link_55\"]}",
                ClientsApiLoansUpdatePostDisbursementRequest.class);

        // Set callback and perform API call
        AgreementSigned200 result = null;
        try {
            result = controller.updatePostDisbursement(clientName, loanId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"client_loan_id\":\"AB001\",\"status\":\"agreement_signed\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
