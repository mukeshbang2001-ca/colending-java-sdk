/*
 * KrazybeeLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package in.credavenue.colenduat01api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import in.credavenue.colenduat01api.DateTimeHelper;
import java.time.LocalDate;
import java.util.List;

/**
 * This is a model class for ClientsApiPaymentsRecordPaymentRequest type.
 */
public class ClientsApiPaymentsRecordPaymentRequest {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Integer installmentNo;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate dueDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double principal;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double interest;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double otherCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double overdueCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double penaltyCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double feeCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double bounceCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double amount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String paymentType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String referenceNo;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate paidDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate investorTransferDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean emiClosed;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean foreclosure;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double pos;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean advanceKnockOff;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double advanceOutstanding;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<UpdatedR> updatedRs;

    /**
     * Default constructor.
     */
    public ClientsApiPaymentsRecordPaymentRequest() {
    }

    /**
     * Initialization constructor.
     * @param  installmentNo  Integer value for installmentNo.
     * @param  dueDate  LocalDate value for dueDate.
     * @param  principal  Double value for principal.
     * @param  interest  Double value for interest.
     * @param  otherCharges  Double value for otherCharges.
     * @param  overdueCharges  Double value for overdueCharges.
     * @param  penaltyCharges  Double value for penaltyCharges.
     * @param  feeCharges  Double value for feeCharges.
     * @param  bounceCharges  Double value for bounceCharges.
     * @param  amount  Double value for amount.
     * @param  paymentType  String value for paymentType.
     * @param  referenceNo  String value for referenceNo.
     * @param  paidDate  LocalDate value for paidDate.
     * @param  investorTransferDate  LocalDate value for investorTransferDate.
     * @param  emiClosed  Boolean value for emiClosed.
     * @param  foreclosure  Boolean value for foreclosure.
     * @param  pos  Double value for pos.
     * @param  advanceKnockOff  Boolean value for advanceKnockOff.
     * @param  advanceOutstanding  Double value for advanceOutstanding.
     * @param  updatedRs  List of UpdatedR value for updatedRs.
     */
    public ClientsApiPaymentsRecordPaymentRequest(
            Integer installmentNo,
            LocalDate dueDate,
            Double principal,
            Double interest,
            Double otherCharges,
            Double overdueCharges,
            Double penaltyCharges,
            Double feeCharges,
            Double bounceCharges,
            Double amount,
            String paymentType,
            String referenceNo,
            LocalDate paidDate,
            LocalDate investorTransferDate,
            Boolean emiClosed,
            Boolean foreclosure,
            Double pos,
            Boolean advanceKnockOff,
            Double advanceOutstanding,
            List<UpdatedR> updatedRs) {
        this.installmentNo = installmentNo;
        this.dueDate = dueDate;
        this.principal = principal;
        this.interest = interest;
        this.otherCharges = otherCharges;
        this.overdueCharges = overdueCharges;
        this.penaltyCharges = penaltyCharges;
        this.feeCharges = feeCharges;
        this.bounceCharges = bounceCharges;
        this.amount = amount;
        this.paymentType = paymentType;
        this.referenceNo = referenceNo;
        this.paidDate = paidDate;
        this.investorTransferDate = investorTransferDate;
        this.emiClosed = emiClosed;
        this.foreclosure = foreclosure;
        this.pos = pos;
        this.advanceKnockOff = advanceKnockOff;
        this.advanceOutstanding = advanceOutstanding;
        this.updatedRs = updatedRs;
    }

    /**
     * Getter for InstallmentNo.
     * @return Returns the Integer
     */
    @JsonGetter("installment_no")
    public Integer getInstallmentNo() {
        return installmentNo;
    }

    /**
     * Setter for InstallmentNo.
     * @param installmentNo Value for Integer
     */
    @JsonSetter("installment_no")
    public void setInstallmentNo(Integer installmentNo) {
        this.installmentNo = installmentNo;
    }

    /**
     * Getter for DueDate.
     * @return Returns the LocalDate
     */
    @JsonGetter("due_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getDueDate() {
        return dueDate;
    }

    /**
     * Setter for DueDate.
     * @param dueDate Value for LocalDate
     */
    @JsonSetter("due_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * Getter for Principal.
     * Total principal amount paid for this installment
     * @return Returns the Double
     */
    @JsonGetter("principal")
    public Double getPrincipal() {
        return principal;
    }

    /**
     * Setter for Principal.
     * Total principal amount paid for this installment
     * @param principal Value for Double
     */
    @JsonSetter("principal")
    public void setPrincipal(Double principal) {
        this.principal = principal;
    }

    /**
     * Getter for Interest.
     * Total interest amount paid for this installement
     * @return Returns the Double
     */
    @JsonGetter("interest")
    public Double getInterest() {
        return interest;
    }

    /**
     * Setter for Interest.
     * Total interest amount paid for this installement
     * @param interest Value for Double
     */
    @JsonSetter("interest")
    public void setInterest(Double interest) {
        this.interest = interest;
    }

    /**
     * Getter for OtherCharges.
     * @return Returns the Double
     */
    @JsonGetter("other_charges")
    public Double getOtherCharges() {
        return otherCharges;
    }

    /**
     * Setter for OtherCharges.
     * @param otherCharges Value for Double
     */
    @JsonSetter("other_charges")
    public void setOtherCharges(Double otherCharges) {
        this.otherCharges = otherCharges;
    }

    /**
     * Getter for OverdueCharges.
     * @return Returns the Double
     */
    @JsonGetter("overdue_charges")
    public Double getOverdueCharges() {
        return overdueCharges;
    }

    /**
     * Setter for OverdueCharges.
     * @param overdueCharges Value for Double
     */
    @JsonSetter("overdue_charges")
    public void setOverdueCharges(Double overdueCharges) {
        this.overdueCharges = overdueCharges;
    }

    /**
     * Getter for PenaltyCharges.
     * @return Returns the Double
     */
    @JsonGetter("penalty_charges")
    public Double getPenaltyCharges() {
        return penaltyCharges;
    }

    /**
     * Setter for PenaltyCharges.
     * @param penaltyCharges Value for Double
     */
    @JsonSetter("penalty_charges")
    public void setPenaltyCharges(Double penaltyCharges) {
        this.penaltyCharges = penaltyCharges;
    }

    /**
     * Getter for FeeCharges.
     * @return Returns the Double
     */
    @JsonGetter("fee_charges")
    public Double getFeeCharges() {
        return feeCharges;
    }

    /**
     * Setter for FeeCharges.
     * @param feeCharges Value for Double
     */
    @JsonSetter("fee_charges")
    public void setFeeCharges(Double feeCharges) {
        this.feeCharges = feeCharges;
    }

    /**
     * Getter for BounceCharges.
     * @return Returns the Double
     */
    @JsonGetter("bounce_charges")
    public Double getBounceCharges() {
        return bounceCharges;
    }

    /**
     * Setter for BounceCharges.
     * @param bounceCharges Value for Double
     */
    @JsonSetter("bounce_charges")
    public void setBounceCharges(Double bounceCharges) {
        this.bounceCharges = bounceCharges;
    }

    /**
     * Getter for Amount.
     * Total Collection Amount
     * @return Returns the Double
     */
    @JsonGetter("amount")
    public Double getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * Total Collection Amount
     * @param amount Value for Double
     */
    @JsonSetter("amount")
    public void setAmount(Double amount) {
        this.amount = amount;
    }

    /**
     * Getter for PaymentType.
     * Normal / Part / Advance
     * @return Returns the String
     */
    @JsonGetter("payment_type")
    public String getPaymentType() {
        return paymentType;
    }

    /**
     * Setter for PaymentType.
     * Normal / Part / Advance
     * @param paymentType Value for String
     */
    @JsonSetter("payment_type")
    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    /**
     * Getter for ReferenceNo.
     * UTR / Cheque Number
     * @return Returns the String
     */
    @JsonGetter("reference_no")
    public String getReferenceNo() {
        return referenceNo;
    }

    /**
     * Setter for ReferenceNo.
     * UTR / Cheque Number
     * @param referenceNo Value for String
     */
    @JsonSetter("reference_no")
    public void setReferenceNo(String referenceNo) {
        this.referenceNo = referenceNo;
    }

    /**
     * Getter for PaidDate.
     * Date when customer paid the amount (YYYY-MM-DD)
     * @return Returns the LocalDate
     */
    @JsonGetter("paid_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getPaidDate() {
        return paidDate;
    }

    /**
     * Setter for PaidDate.
     * Date when customer paid the amount (YYYY-MM-DD)
     * @param paidDate Value for LocalDate
     */
    @JsonSetter("paid_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setPaidDate(LocalDate paidDate) {
        this.paidDate = paidDate;
    }

    /**
     * Getter for InvestorTransferDate.
     * Date when originator transferred the amount to investor (YYYY-MM-DD)
     * @return Returns the LocalDate
     */
    @JsonGetter("investor_transfer_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getInvestorTransferDate() {
        return investorTransferDate;
    }

    /**
     * Setter for InvestorTransferDate.
     * Date when originator transferred the amount to investor (YYYY-MM-DD)
     * @param investorTransferDate Value for LocalDate
     */
    @JsonSetter("investor_transfer_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setInvestorTransferDate(LocalDate investorTransferDate) {
        this.investorTransferDate = investorTransferDate;
    }

    /**
     * Getter for EmiClosed.
     * Y / N
     * @return Returns the Boolean
     */
    @JsonGetter("emi_closed")
    public Boolean getEmiClosed() {
        return emiClosed;
    }

    /**
     * Setter for EmiClosed.
     * Y / N
     * @param emiClosed Value for Boolean
     */
    @JsonSetter("emi_closed")
    public void setEmiClosed(Boolean emiClosed) {
        this.emiClosed = emiClosed;
    }

    /**
     * Getter for Foreclosure.
     * Y / N
     * @return Returns the Boolean
     */
    @JsonGetter("foreclosure")
    public Boolean getForeclosure() {
        return foreclosure;
    }

    /**
     * Setter for Foreclosure.
     * Y / N
     * @param foreclosure Value for Boolean
     */
    @JsonSetter("foreclosure")
    public void setForeclosure(Boolean foreclosure) {
        this.foreclosure = foreclosure;
    }

    /**
     * Getter for Pos.
     * Before the collection record to mention pos for that loan
     * @return Returns the Double
     */
    @JsonGetter("pos")
    public Double getPos() {
        return pos;
    }

    /**
     * Setter for Pos.
     * Before the collection record to mention pos for that loan
     * @param pos Value for Double
     */
    @JsonSetter("pos")
    public void setPos(Double pos) {
        this.pos = pos;
    }

    /**
     * Getter for AdvanceKnockOff.
     * Y / N (Required if advance payment is made)
     * @return Returns the Boolean
     */
    @JsonGetter("advance_knock_off")
    public Boolean getAdvanceKnockOff() {
        return advanceKnockOff;
    }

    /**
     * Setter for AdvanceKnockOff.
     * Y / N (Required if advance payment is made)
     * @param advanceKnockOff Value for Boolean
     */
    @JsonSetter("advance_knock_off")
    public void setAdvanceKnockOff(Boolean advanceKnockOff) {
        this.advanceKnockOff = advanceKnockOff;
    }

    /**
     * Getter for AdvanceOutstanding.
     * Before the collection record to mention advance outstanding for that loan
     * @return Returns the Double
     */
    @JsonGetter("advance_outstanding")
    public Double getAdvanceOutstanding() {
        return advanceOutstanding;
    }

    /**
     * Setter for AdvanceOutstanding.
     * Before the collection record to mention advance outstanding for that loan
     * @param advanceOutstanding Value for Double
     */
    @JsonSetter("advance_outstanding")
    public void setAdvanceOutstanding(Double advanceOutstanding) {
        this.advanceOutstanding = advanceOutstanding;
    }

    /**
     * Getter for UpdatedRs.
     * Required when prepayment is made
     * @return Returns the List of UpdatedR
     */
    @JsonGetter("updated_rs")
    public List<UpdatedR> getUpdatedRs() {
        return updatedRs;
    }

    /**
     * Setter for UpdatedRs.
     * Required when prepayment is made
     * @param updatedRs Value for List of UpdatedR
     */
    @JsonSetter("updated_rs")
    public void setUpdatedRs(List<UpdatedR> updatedRs) {
        this.updatedRs = updatedRs;
    }

    /**
     * Converts this ClientsApiPaymentsRecordPaymentRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ClientsApiPaymentsRecordPaymentRequest [" + "installmentNo=" + installmentNo
                + ", dueDate=" + dueDate + ", principal=" + principal + ", interest=" + interest
                + ", otherCharges=" + otherCharges + ", overdueCharges=" + overdueCharges
                + ", penaltyCharges=" + penaltyCharges + ", feeCharges=" + feeCharges
                + ", bounceCharges=" + bounceCharges + ", amount=" + amount + ", paymentType="
                + paymentType + ", referenceNo=" + referenceNo + ", paidDate=" + paidDate
                + ", investorTransferDate=" + investorTransferDate + ", emiClosed=" + emiClosed
                + ", foreclosure=" + foreclosure + ", pos=" + pos + ", advanceKnockOff="
                + advanceKnockOff + ", advanceOutstanding=" + advanceOutstanding + ", updatedRs="
                + updatedRs + "]";
    }

    /**
     * Builds a new {@link ClientsApiPaymentsRecordPaymentRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ClientsApiPaymentsRecordPaymentRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .installmentNo(getInstallmentNo())
                .dueDate(getDueDate())
                .principal(getPrincipal())
                .interest(getInterest())
                .otherCharges(getOtherCharges())
                .overdueCharges(getOverdueCharges())
                .penaltyCharges(getPenaltyCharges())
                .feeCharges(getFeeCharges())
                .bounceCharges(getBounceCharges())
                .amount(getAmount())
                .paymentType(getPaymentType())
                .referenceNo(getReferenceNo())
                .paidDate(getPaidDate())
                .investorTransferDate(getInvestorTransferDate())
                .emiClosed(getEmiClosed())
                .foreclosure(getForeclosure())
                .pos(getPos())
                .advanceKnockOff(getAdvanceKnockOff())
                .advanceOutstanding(getAdvanceOutstanding())
                .updatedRs(getUpdatedRs());
        return builder;
    }

    /**
     * Class to build instances of {@link ClientsApiPaymentsRecordPaymentRequest}.
     */
    public static class Builder {
        private Integer installmentNo;
        private LocalDate dueDate;
        private Double principal;
        private Double interest;
        private Double otherCharges;
        private Double overdueCharges;
        private Double penaltyCharges;
        private Double feeCharges;
        private Double bounceCharges;
        private Double amount;
        private String paymentType;
        private String referenceNo;
        private LocalDate paidDate;
        private LocalDate investorTransferDate;
        private Boolean emiClosed;
        private Boolean foreclosure;
        private Double pos;
        private Boolean advanceKnockOff;
        private Double advanceOutstanding;
        private List<UpdatedR> updatedRs;



        /**
         * Setter for installmentNo.
         * @param  installmentNo  Integer value for installmentNo.
         * @return Builder
         */
        public Builder installmentNo(Integer installmentNo) {
            this.installmentNo = installmentNo;
            return this;
        }

        /**
         * Setter for dueDate.
         * @param  dueDate  LocalDate value for dueDate.
         * @return Builder
         */
        public Builder dueDate(LocalDate dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * Setter for principal.
         * @param  principal  Double value for principal.
         * @return Builder
         */
        public Builder principal(Double principal) {
            this.principal = principal;
            return this;
        }

        /**
         * Setter for interest.
         * @param  interest  Double value for interest.
         * @return Builder
         */
        public Builder interest(Double interest) {
            this.interest = interest;
            return this;
        }

        /**
         * Setter for otherCharges.
         * @param  otherCharges  Double value for otherCharges.
         * @return Builder
         */
        public Builder otherCharges(Double otherCharges) {
            this.otherCharges = otherCharges;
            return this;
        }

        /**
         * Setter for overdueCharges.
         * @param  overdueCharges  Double value for overdueCharges.
         * @return Builder
         */
        public Builder overdueCharges(Double overdueCharges) {
            this.overdueCharges = overdueCharges;
            return this;
        }

        /**
         * Setter for penaltyCharges.
         * @param  penaltyCharges  Double value for penaltyCharges.
         * @return Builder
         */
        public Builder penaltyCharges(Double penaltyCharges) {
            this.penaltyCharges = penaltyCharges;
            return this;
        }

        /**
         * Setter for feeCharges.
         * @param  feeCharges  Double value for feeCharges.
         * @return Builder
         */
        public Builder feeCharges(Double feeCharges) {
            this.feeCharges = feeCharges;
            return this;
        }

        /**
         * Setter for bounceCharges.
         * @param  bounceCharges  Double value for bounceCharges.
         * @return Builder
         */
        public Builder bounceCharges(Double bounceCharges) {
            this.bounceCharges = bounceCharges;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Double value for amount.
         * @return Builder
         */
        public Builder amount(Double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for paymentType.
         * @param  paymentType  String value for paymentType.
         * @return Builder
         */
        public Builder paymentType(String paymentType) {
            this.paymentType = paymentType;
            return this;
        }

        /**
         * Setter for referenceNo.
         * @param  referenceNo  String value for referenceNo.
         * @return Builder
         */
        public Builder referenceNo(String referenceNo) {
            this.referenceNo = referenceNo;
            return this;
        }

        /**
         * Setter for paidDate.
         * @param  paidDate  LocalDate value for paidDate.
         * @return Builder
         */
        public Builder paidDate(LocalDate paidDate) {
            this.paidDate = paidDate;
            return this;
        }

        /**
         * Setter for investorTransferDate.
         * @param  investorTransferDate  LocalDate value for investorTransferDate.
         * @return Builder
         */
        public Builder investorTransferDate(LocalDate investorTransferDate) {
            this.investorTransferDate = investorTransferDate;
            return this;
        }

        /**
         * Setter for emiClosed.
         * @param  emiClosed  Boolean value for emiClosed.
         * @return Builder
         */
        public Builder emiClosed(Boolean emiClosed) {
            this.emiClosed = emiClosed;
            return this;
        }

        /**
         * Setter for foreclosure.
         * @param  foreclosure  Boolean value for foreclosure.
         * @return Builder
         */
        public Builder foreclosure(Boolean foreclosure) {
            this.foreclosure = foreclosure;
            return this;
        }

        /**
         * Setter for pos.
         * @param  pos  Double value for pos.
         * @return Builder
         */
        public Builder pos(Double pos) {
            this.pos = pos;
            return this;
        }

        /**
         * Setter for advanceKnockOff.
         * @param  advanceKnockOff  Boolean value for advanceKnockOff.
         * @return Builder
         */
        public Builder advanceKnockOff(Boolean advanceKnockOff) {
            this.advanceKnockOff = advanceKnockOff;
            return this;
        }

        /**
         * Setter for advanceOutstanding.
         * @param  advanceOutstanding  Double value for advanceOutstanding.
         * @return Builder
         */
        public Builder advanceOutstanding(Double advanceOutstanding) {
            this.advanceOutstanding = advanceOutstanding;
            return this;
        }

        /**
         * Setter for updatedRs.
         * @param  updatedRs  List of UpdatedR value for updatedRs.
         * @return Builder
         */
        public Builder updatedRs(List<UpdatedR> updatedRs) {
            this.updatedRs = updatedRs;
            return this;
        }

        /**
         * Builds a new {@link ClientsApiPaymentsRecordPaymentRequest} object using the set fields.
         * @return {@link ClientsApiPaymentsRecordPaymentRequest}
         */
        public ClientsApiPaymentsRecordPaymentRequest build() {
            return new ClientsApiPaymentsRecordPaymentRequest(installmentNo, dueDate, principal,
                    interest, otherCharges, overdueCharges, penaltyCharges, feeCharges,
                    bounceCharges, amount, paymentType, referenceNo, paidDate, investorTransferDate,
                    emiClosed, foreclosure, pos, advanceKnockOff, advanceOutstanding, updatedRs);
        }
    }
}
