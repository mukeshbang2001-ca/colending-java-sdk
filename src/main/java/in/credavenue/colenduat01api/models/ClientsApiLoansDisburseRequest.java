/*
 * KrazybeeLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package in.credavenue.colenduat01api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import in.credavenue.colenduat01api.DateTimeHelper;
import java.time.LocalDate;
import java.util.List;

/**
 * This is a model class for ClientsApiLoansDisburseRequest type.
 */
public class ClientsApiLoansDisburseRequest {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate disbursementDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate firstRepaymentDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String instrumentNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String instrumentType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double loanAmount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double sanctionAmount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate differentialInterestStartDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double differentialInterest;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double processingFee;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double stampDuty;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double insurancePremiumAmount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double documentationFee;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double otherCharges;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Double netDisbursedAmount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean pennyTestStatus;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<String> pennyTestReportLink;

    /**
     * Default constructor.
     */
    public ClientsApiLoansDisburseRequest() {
    }

    /**
     * Initialization constructor.
     * @param  disbursementDate  LocalDate value for disbursementDate.
     * @param  firstRepaymentDate  LocalDate value for firstRepaymentDate.
     * @param  instrumentNumber  String value for instrumentNumber.
     * @param  instrumentType  String value for instrumentType.
     * @param  loanAmount  Double value for loanAmount.
     * @param  sanctionAmount  Double value for sanctionAmount.
     * @param  differentialInterestStartDate  LocalDate value for differentialInterestStartDate.
     * @param  differentialInterest  Double value for differentialInterest.
     * @param  processingFee  Double value for processingFee.
     * @param  stampDuty  Double value for stampDuty.
     * @param  insurancePremiumAmount  Double value for insurancePremiumAmount.
     * @param  documentationFee  Double value for documentationFee.
     * @param  otherCharges  Double value for otherCharges.
     * @param  netDisbursedAmount  Double value for netDisbursedAmount.
     * @param  pennyTestStatus  Boolean value for pennyTestStatus.
     * @param  pennyTestReportLink  List of String value for pennyTestReportLink.
     */
    public ClientsApiLoansDisburseRequest(
            LocalDate disbursementDate,
            LocalDate firstRepaymentDate,
            String instrumentNumber,
            String instrumentType,
            Double loanAmount,
            Double sanctionAmount,
            LocalDate differentialInterestStartDate,
            Double differentialInterest,
            Double processingFee,
            Double stampDuty,
            Double insurancePremiumAmount,
            Double documentationFee,
            Double otherCharges,
            Double netDisbursedAmount,
            Boolean pennyTestStatus,
            List<String> pennyTestReportLink) {
        this.disbursementDate = disbursementDate;
        this.firstRepaymentDate = firstRepaymentDate;
        this.instrumentNumber = instrumentNumber;
        this.instrumentType = instrumentType;
        this.loanAmount = loanAmount;
        this.sanctionAmount = sanctionAmount;
        this.differentialInterestStartDate = differentialInterestStartDate;
        this.differentialInterest = differentialInterest;
        this.processingFee = processingFee;
        this.stampDuty = stampDuty;
        this.insurancePremiumAmount = insurancePremiumAmount;
        this.documentationFee = documentationFee;
        this.otherCharges = otherCharges;
        this.netDisbursedAmount = netDisbursedAmount;
        this.pennyTestStatus = pennyTestStatus;
        this.pennyTestReportLink = pennyTestReportLink;
    }

    /**
     * Getter for DisbursementDate.
     * Disbursement date to the end customer
     * @return Returns the LocalDate
     */
    @JsonGetter("disbursement_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getDisbursementDate() {
        return disbursementDate;
    }

    /**
     * Setter for DisbursementDate.
     * Disbursement date to the end customer
     * @param disbursementDate Value for LocalDate
     */
    @JsonSetter("disbursement_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setDisbursementDate(LocalDate disbursementDate) {
        this.disbursementDate = disbursementDate;
    }

    /**
     * Getter for FirstRepaymentDate.
     * First repayment date as per repayment schedule
     * @return Returns the LocalDate
     */
    @JsonGetter("first_repayment_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getFirstRepaymentDate() {
        return firstRepaymentDate;
    }

    /**
     * Setter for FirstRepaymentDate.
     * First repayment date as per repayment schedule
     * @param firstRepaymentDate Value for LocalDate
     */
    @JsonSetter("first_repayment_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setFirstRepaymentDate(LocalDate firstRepaymentDate) {
        this.firstRepaymentDate = firstRepaymentDate;
    }

    /**
     * Getter for InstrumentNumber.
     * UTR / Cheque Number
     * @return Returns the String
     */
    @JsonGetter("instrument_number")
    public String getInstrumentNumber() {
        return instrumentNumber;
    }

    /**
     * Setter for InstrumentNumber.
     * UTR / Cheque Number
     * @param instrumentNumber Value for String
     */
    @JsonSetter("instrument_number")
    public void setInstrumentNumber(String instrumentNumber) {
        this.instrumentNumber = instrumentNumber;
    }

    /**
     * Getter for InstrumentType.
     * RTGS / NEFT / UPI / Cheque
     * @return Returns the String
     */
    @JsonGetter("instrument_type")
    public String getInstrumentType() {
        return instrumentType;
    }

    /**
     * Setter for InstrumentType.
     * RTGS / NEFT / UPI / Cheque
     * @param instrumentType Value for String
     */
    @JsonSetter("instrument_type")
    public void setInstrumentType(String instrumentType) {
        this.instrumentType = instrumentType;
    }

    /**
     * Getter for LoanAmount.
     * @return Returns the Double
     */
    @JsonGetter("loan_amount")
    public Double getLoanAmount() {
        return loanAmount;
    }

    /**
     * Setter for LoanAmount.
     * @param loanAmount Value for Double
     */
    @JsonSetter("loan_amount")
    public void setLoanAmount(Double loanAmount) {
        this.loanAmount = loanAmount;
    }

    /**
     * Getter for SanctionAmount.
     * @return Returns the Double
     */
    @JsonGetter("sanction_amount")
    public Double getSanctionAmount() {
        return sanctionAmount;
    }

    /**
     * Setter for SanctionAmount.
     * @param sanctionAmount Value for Double
     */
    @JsonSetter("sanction_amount")
    public void setSanctionAmount(Double sanctionAmount) {
        this.sanctionAmount = sanctionAmount;
    }

    /**
     * Getter for DifferentialInterestStartDate.
     * PreEMI Interest Due Date
     * @return Returns the LocalDate
     */
    @JsonGetter("differential_interest_start_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getDifferentialInterestStartDate() {
        return differentialInterestStartDate;
    }

    /**
     * Setter for DifferentialInterestStartDate.
     * PreEMI Interest Due Date
     * @param differentialInterestStartDate Value for LocalDate
     */
    @JsonSetter("differential_interest_start_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setDifferentialInterestStartDate(LocalDate differentialInterestStartDate) {
        this.differentialInterestStartDate = differentialInterestStartDate;
    }

    /**
     * Getter for DifferentialInterest.
     * Broken Period Interest Amount (in Rupees)
     * @return Returns the Double
     */
    @JsonGetter("differential_interest")
    public Double getDifferentialInterest() {
        return differentialInterest;
    }

    /**
     * Setter for DifferentialInterest.
     * Broken Period Interest Amount (in Rupees)
     * @param differentialInterest Value for Double
     */
    @JsonSetter("differential_interest")
    public void setDifferentialInterest(Double differentialInterest) {
        this.differentialInterest = differentialInterest;
    }

    /**
     * Getter for ProcessingFee.
     * Processing Fee (Inclusive of GST)
     * @return Returns the Double
     */
    @JsonGetter("processing_fee")
    public Double getProcessingFee() {
        return processingFee;
    }

    /**
     * Setter for ProcessingFee.
     * Processing Fee (Inclusive of GST)
     * @param processingFee Value for Double
     */
    @JsonSetter("processing_fee")
    public void setProcessingFee(Double processingFee) {
        this.processingFee = processingFee;
    }

    /**
     * Getter for StampDuty.
     * @return Returns the Double
     */
    @JsonGetter("stamp_duty")
    public Double getStampDuty() {
        return stampDuty;
    }

    /**
     * Setter for StampDuty.
     * @param stampDuty Value for Double
     */
    @JsonSetter("stamp_duty")
    public void setStampDuty(Double stampDuty) {
        this.stampDuty = stampDuty;
    }

    /**
     * Getter for InsurancePremiumAmount.
     * Insurance Premium (Inclusive of GST)
     * @return Returns the Double
     */
    @JsonGetter("insurance_premium_amount")
    public Double getInsurancePremiumAmount() {
        return insurancePremiumAmount;
    }

    /**
     * Setter for InsurancePremiumAmount.
     * Insurance Premium (Inclusive of GST)
     * @param insurancePremiumAmount Value for Double
     */
    @JsonSetter("insurance_premium_amount")
    public void setInsurancePremiumAmount(Double insurancePremiumAmount) {
        this.insurancePremiumAmount = insurancePremiumAmount;
    }

    /**
     * Getter for DocumentationFee.
     * Documentation Charges (Inclusive of GST)
     * @return Returns the Double
     */
    @JsonGetter("documentation_fee")
    public Double getDocumentationFee() {
        return documentationFee;
    }

    /**
     * Setter for DocumentationFee.
     * Documentation Charges (Inclusive of GST)
     * @param documentationFee Value for Double
     */
    @JsonSetter("documentation_fee")
    public void setDocumentationFee(Double documentationFee) {
        this.documentationFee = documentationFee;
    }

    /**
     * Getter for OtherCharges.
     * Any Other Charges (Inclusive of GST)
     * @return Returns the Double
     */
    @JsonGetter("other_charges")
    public Double getOtherCharges() {
        return otherCharges;
    }

    /**
     * Setter for OtherCharges.
     * Any Other Charges (Inclusive of GST)
     * @param otherCharges Value for Double
     */
    @JsonSetter("other_charges")
    public void setOtherCharges(Double otherCharges) {
        this.otherCharges = otherCharges;
    }

    /**
     * Getter for NetDisbursedAmount.
     * @return Returns the Double
     */
    @JsonGetter("net_disbursed_amount")
    public Double getNetDisbursedAmount() {
        return netDisbursedAmount;
    }

    /**
     * Setter for NetDisbursedAmount.
     * @param netDisbursedAmount Value for Double
     */
    @JsonSetter("net_disbursed_amount")
    public void setNetDisbursedAmount(Double netDisbursedAmount) {
        this.netDisbursedAmount = netDisbursedAmount;
    }

    /**
     * Getter for PennyTestStatus.
     * @return Returns the Boolean
     */
    @JsonGetter("penny_test_status")
    public Boolean getPennyTestStatus() {
        return pennyTestStatus;
    }

    /**
     * Setter for PennyTestStatus.
     * @param pennyTestStatus Value for Boolean
     */
    @JsonSetter("penny_test_status")
    public void setPennyTestStatus(Boolean pennyTestStatus) {
        this.pennyTestStatus = pennyTestStatus;
    }

    /**
     * Getter for PennyTestReportLink.
     * @return Returns the List of String
     */
    @JsonGetter("penny_test_report_link")
    public List<String> getPennyTestReportLink() {
        return pennyTestReportLink;
    }

    /**
     * Setter for PennyTestReportLink.
     * @param pennyTestReportLink Value for List of String
     */
    @JsonSetter("penny_test_report_link")
    public void setPennyTestReportLink(List<String> pennyTestReportLink) {
        this.pennyTestReportLink = pennyTestReportLink;
    }

    /**
     * Converts this ClientsApiLoansDisburseRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ClientsApiLoansDisburseRequest [" + "disbursementDate=" + disbursementDate
                + ", firstRepaymentDate=" + firstRepaymentDate + ", instrumentNumber="
                + instrumentNumber + ", instrumentType=" + instrumentType + ", loanAmount="
                + loanAmount + ", sanctionAmount=" + sanctionAmount
                + ", differentialInterestStartDate=" + differentialInterestStartDate
                + ", differentialInterest=" + differentialInterest + ", processingFee="
                + processingFee + ", stampDuty=" + stampDuty + ", insurancePremiumAmount="
                + insurancePremiumAmount + ", documentationFee=" + documentationFee
                + ", otherCharges=" + otherCharges + ", netDisbursedAmount=" + netDisbursedAmount
                + ", pennyTestStatus=" + pennyTestStatus + ", pennyTestReportLink="
                + pennyTestReportLink + "]";
    }

    /**
     * Builds a new {@link ClientsApiLoansDisburseRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ClientsApiLoansDisburseRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .disbursementDate(getDisbursementDate())
                .firstRepaymentDate(getFirstRepaymentDate())
                .instrumentNumber(getInstrumentNumber())
                .instrumentType(getInstrumentType())
                .loanAmount(getLoanAmount())
                .sanctionAmount(getSanctionAmount())
                .differentialInterestStartDate(getDifferentialInterestStartDate())
                .differentialInterest(getDifferentialInterest())
                .processingFee(getProcessingFee())
                .stampDuty(getStampDuty())
                .insurancePremiumAmount(getInsurancePremiumAmount())
                .documentationFee(getDocumentationFee())
                .otherCharges(getOtherCharges())
                .netDisbursedAmount(getNetDisbursedAmount())
                .pennyTestStatus(getPennyTestStatus())
                .pennyTestReportLink(getPennyTestReportLink());
        return builder;
    }

    /**
     * Class to build instances of {@link ClientsApiLoansDisburseRequest}.
     */
    public static class Builder {
        private LocalDate disbursementDate;
        private LocalDate firstRepaymentDate;
        private String instrumentNumber;
        private String instrumentType;
        private Double loanAmount;
        private Double sanctionAmount;
        private LocalDate differentialInterestStartDate;
        private Double differentialInterest;
        private Double processingFee;
        private Double stampDuty;
        private Double insurancePremiumAmount;
        private Double documentationFee;
        private Double otherCharges;
        private Double netDisbursedAmount;
        private Boolean pennyTestStatus;
        private List<String> pennyTestReportLink;



        /**
         * Setter for disbursementDate.
         * @param  disbursementDate  LocalDate value for disbursementDate.
         * @return Builder
         */
        public Builder disbursementDate(LocalDate disbursementDate) {
            this.disbursementDate = disbursementDate;
            return this;
        }

        /**
         * Setter for firstRepaymentDate.
         * @param  firstRepaymentDate  LocalDate value for firstRepaymentDate.
         * @return Builder
         */
        public Builder firstRepaymentDate(LocalDate firstRepaymentDate) {
            this.firstRepaymentDate = firstRepaymentDate;
            return this;
        }

        /**
         * Setter for instrumentNumber.
         * @param  instrumentNumber  String value for instrumentNumber.
         * @return Builder
         */
        public Builder instrumentNumber(String instrumentNumber) {
            this.instrumentNumber = instrumentNumber;
            return this;
        }

        /**
         * Setter for instrumentType.
         * @param  instrumentType  String value for instrumentType.
         * @return Builder
         */
        public Builder instrumentType(String instrumentType) {
            this.instrumentType = instrumentType;
            return this;
        }

        /**
         * Setter for loanAmount.
         * @param  loanAmount  Double value for loanAmount.
         * @return Builder
         */
        public Builder loanAmount(Double loanAmount) {
            this.loanAmount = loanAmount;
            return this;
        }

        /**
         * Setter for sanctionAmount.
         * @param  sanctionAmount  Double value for sanctionAmount.
         * @return Builder
         */
        public Builder sanctionAmount(Double sanctionAmount) {
            this.sanctionAmount = sanctionAmount;
            return this;
        }

        /**
         * Setter for differentialInterestStartDate.
         * @param  differentialInterestStartDate  LocalDate value for differentialInterestStartDate.
         * @return Builder
         */
        public Builder differentialInterestStartDate(LocalDate differentialInterestStartDate) {
            this.differentialInterestStartDate = differentialInterestStartDate;
            return this;
        }

        /**
         * Setter for differentialInterest.
         * @param  differentialInterest  Double value for differentialInterest.
         * @return Builder
         */
        public Builder differentialInterest(Double differentialInterest) {
            this.differentialInterest = differentialInterest;
            return this;
        }

        /**
         * Setter for processingFee.
         * @param  processingFee  Double value for processingFee.
         * @return Builder
         */
        public Builder processingFee(Double processingFee) {
            this.processingFee = processingFee;
            return this;
        }

        /**
         * Setter for stampDuty.
         * @param  stampDuty  Double value for stampDuty.
         * @return Builder
         */
        public Builder stampDuty(Double stampDuty) {
            this.stampDuty = stampDuty;
            return this;
        }

        /**
         * Setter for insurancePremiumAmount.
         * @param  insurancePremiumAmount  Double value for insurancePremiumAmount.
         * @return Builder
         */
        public Builder insurancePremiumAmount(Double insurancePremiumAmount) {
            this.insurancePremiumAmount = insurancePremiumAmount;
            return this;
        }

        /**
         * Setter for documentationFee.
         * @param  documentationFee  Double value for documentationFee.
         * @return Builder
         */
        public Builder documentationFee(Double documentationFee) {
            this.documentationFee = documentationFee;
            return this;
        }

        /**
         * Setter for otherCharges.
         * @param  otherCharges  Double value for otherCharges.
         * @return Builder
         */
        public Builder otherCharges(Double otherCharges) {
            this.otherCharges = otherCharges;
            return this;
        }

        /**
         * Setter for netDisbursedAmount.
         * @param  netDisbursedAmount  Double value for netDisbursedAmount.
         * @return Builder
         */
        public Builder netDisbursedAmount(Double netDisbursedAmount) {
            this.netDisbursedAmount = netDisbursedAmount;
            return this;
        }

        /**
         * Setter for pennyTestStatus.
         * @param  pennyTestStatus  Boolean value for pennyTestStatus.
         * @return Builder
         */
        public Builder pennyTestStatus(Boolean pennyTestStatus) {
            this.pennyTestStatus = pennyTestStatus;
            return this;
        }

        /**
         * Setter for pennyTestReportLink.
         * @param  pennyTestReportLink  List of String value for pennyTestReportLink.
         * @return Builder
         */
        public Builder pennyTestReportLink(List<String> pennyTestReportLink) {
            this.pennyTestReportLink = pennyTestReportLink;
            return this;
        }

        /**
         * Builds a new {@link ClientsApiLoansDisburseRequest} object using the set fields.
         * @return {@link ClientsApiLoansDisburseRequest}
         */
        public ClientsApiLoansDisburseRequest build() {
            return new ClientsApiLoansDisburseRequest(disbursementDate, firstRepaymentDate,
                    instrumentNumber, instrumentType, loanAmount, sanctionAmount,
                    differentialInterestStartDate, differentialInterest, processingFee, stampDuty,
                    insurancePremiumAmount, documentationFee, otherCharges, netDisbursedAmount,
                    pennyTestStatus, pennyTestReportLink);
        }
    }
}
